
#user  nobody; #配置用户或者组，默认nobody

#worker_processes  1; #允许生成的进程数，默认为1

#pid        logs/nginx.pid; #nginx进程运行文件存放位置
pid        pid/nginx.pid;

#error_log  logs/nginx.log debug;
error_log  logs/nginx.log debug; #日志路径、级别，可以放入全局块、http块、server块。nginx日志级别：debug(多)、info、notice、warn、error、crit、alert、emerg(少)


events {
    #use epoll; #事件驱动模型（多路复用）。use [ kqueue | rtsig | epoll | /dev/poll | select | poll ];
    #accept_mutex on; #设置网路连接序列化，防止发生惊群现象，默认为on
    #multi_accept off;  #设置一个进程是否同时接受多个网络连接，默认为off
    worker_connections  1024; #最大连接数，默认为512
}


http {
    include       mime.types; #文件扩展名与文件类型映射表
    default_type  application/octet-stream; #默认文件类型，默认为text/plain

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    log_format myLogFormat '$remote_addr–$remote_user [$time_local] $request $status $body_bytes_sent $http_referer $http_user_agent $http_x_forwarded_for'; #自定义日志格式
    access_log logs/access.log myLogFormat; #服务日志路径、格式，默认为combined
    #access_log off; #关闭服务日志

    sendfile        on; #允许以sendfile方式传输文件，默认为off，可以放入http块、server块、location块
    sendfile_max_chunk 100k; #每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限

    #keepalive_timeout  0;
    keepalive_timeout  65; #连接超时时间，默认为75s，可以放入http块、server块、location块


    #负载均衡
    #轮询
    #使用权重指定访问几率，权重与访问几率成正比
    # upstream myServer {
    #   server 127.0.0.1:64469 weight=1;
    #   server 192.168.1.1:64469 weight=2;
    # }

    #ip_hash
    #按照请求IP的hash值分配服务器，同一个IP固定访问一个服务器。解决session问题
    # upstream myServer {
    #   server 127.0.0.1:64469;
    #   server 192.168.1.1:64469;
    #   ip_hash;
    # }

    #fair(第三方)
    #按照服务器的响应时间分配请求，响应时间短的优先分配请求
    # upstream myServer {
    #   server 127.0.0.1:64469;
    #   server 192.168.1.1:64469;
    #   fair;
    # }

    #url_hash(第三方)
    #按照请求url的hash值分配服务器，同一个url固定访问一个服务器。服务器为缓存服务器时有效
    # upstream myServer {
    #   server 127.0.0.1:64469;
    #   server 192.168.1.1:64469;
    #   hash_url $request_uri;
    #   hash_method crc32;
    # }

    #upstream状态值
    #down 当前服务器不参与负载均衡
    #weight 权重，默认值为1
    #backup 其他非backup服务器down或者忙时，请求backup服务器。这台服务器压力最小
    #max_fails 请求失败的最大次数，默认值为1。当超过最大次数时，返回proxy_next_upstream模块定义的内容
    #fail_timeout 请求失败的次数超过最大次数max_fails时，暂停的时间，可以与max_fails一起使用


    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
