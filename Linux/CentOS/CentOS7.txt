##CentOS 7

升级内核
	1、查看内核版本
		uname -r
	2、导入public key
		rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org
	3、安装ELRepo（http://elrepo.org/tiki/tiki-index.php）
		rpm -Uvh https://www.elrepo.org/elrepo-release-6-8.el6.elrepo.noarch.rpm
	4、安装kernel-lt或kernel-ml
		yum --enablerepo=elrepo-kernel install kernel-lt -y		kernel-lt		长期支持版本
		yum --enablerepo=elrepo-kernel install kernel-ml -y		kernel-ml		最新稳定版本
	5、编辑/etc/grub.conf，修改Grub引导顺序
		default=0	一般最新安装的内核在第一位
	6、重启并查看内核版本
		reboot
		uname -r

更换软件源
	1、备份
		mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup
	2、下载
		wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo
	3、清除缓存
		yum clean all
	4、更新缓存
		yum makecache

1、SSH服务
	安装openssh
		yum install openssh*
	启动sshd服务
		systemctl status sshd
		systemctl start sshd
		systemctl stop sshd
	开机启动sshd服务
		systemctl enable sshd
		systemctl disable sshd
2、firewall防火墙
	查看防火墙规则
		firewall-cmd --list-all
	查看端口80是否开放
		firewall-cmd --query-port=80/tcp
	开放80端口
		firewall-cmd --permanent --add-port=80/tcp
	闭塞80端口
		firewall-cmd --permanent --remove-port=80/tcp
	修改配置需要重新启动防火墙
		firewall-cmd --reload
3、安装jdk
	解压
		tar -xzf jdk-8u181-linux-x64.tar.gz
	移动
		mv jdk1.8.0_181 /usr/local/jdk
	卸载openjdk
		搜索openjdk包
			rpm -qa|grep openjdk
		卸载openjdk包
			rpm -e --nodeps java-1.7.0-openjdk-1.7.0.191-2.6.15.4.el7_5.x86_64
			rpm -e --nodeps java-1.7.0-openjdk-headless-1.7.0.191-2.6.15.4.el7_5.x86_64
			rpm -e --nodeps java-1.8.0-openjdk-1.8.0.191.b12-0.el7_5.x86_64
			rpm -e --nodeps java-1.8.0-openjdk-headless-1.8.0.191.b12-0.el7_5.x86_64
	配置环境变量
		vim /etc/profile
		export JAVA_HOME=/usr/local/jdk/jdk1.8.0_181
		export PATH=$JAVA_HOME/bin:$PATH
		source /etc/profile
4、安装nginx
	安装依赖包
		yum install gcc-c++
		yum install -y pcre pcre-devel
		yum install -y zlib zlib-devel
		yum install -y openssl openssl-devel
	解压
		tar -xzf nginx-1.14.0.tar.gz
	进入nginx目录
		编译
			./configure
		执行
			make
			make install
		进入sbin目录
			启动
				./nginx
	开放80端口
		firewall-cmd --permanent --add-port=80/tcp
	重新启动防火墙
		firewall-cmd --reload
5、安装tomcat
	解压
		tar -xzf apache-tomcat-8.5.34.tar.gz
	移动
		mv apache-tomcat-8.5.34 /usr/local/tomcat/tomcat1
		mv apache-tomcat-8.5.34 /usr/local/tomcat/tomcat2

6、Docker
C/S架构，Client与Server通信
注册服务器、仓库、镜像、容器
       注册服务器上存放着多个仓库，例如Ubuntu仓库、CentOS仓库等。一个仓库包含多个不同版本的镜像，例如Ubuntu仓库包含Ubuntu 16.04、Ubuntu 18.04等不同版本的镜像。镜像是一个面向Docker引擎的完整的文件系统，例如完整的Ubuntu操作系统。容器是根据镜像创建的实例。可以创建、启动、停止、删除。可以根据一个镜像创建多个容器，这些容器互相隔离，互不可见。容器可以打包成为镜像方便再次使用。镜像本身是只读的，容器根据镜像启动时，Docker引擎会创建一个可写层，镜像本身保持不变。

	安装	yum install docker
	测试	docker version

	启动	service docker start/systemctl start docker
	重启	service docker restart /systemctl restart docker
	停止	service docker stop/systemctl stop docker
	查看状态	service docker status/systemctl status docker

	查看所有可用镜像	docker images
	查找镜像	docker search ubuntu
	拉取镜像	docker pull ubuntu
	删除镜像	docker rmi ubuntu

	查看正在运行的容器		docker ps
	查看所有容器		docker ps -a

	运行容器	docker run name
	创建容器	docker create name
	启动容器	docker start name
	停止容器	docker stop name
	删除容器	docker rm name

	进入容器的命令行操作界面	docker attach name

	查看日志	docker logs -f --tail 1000 name

	推送镜像到Docker Hub
		登录
			docker login
				Username: ybxxszl
				Password: wjy13944997040
				Email: 1062837400@qq.com
		标记镜像
			docker tag yitengshidai/tomcat:0.1 ybxxszl/company_tomcat:1.0
		推送镜像
			docker push ybxxszl/company_tomcat:1.0
		拉取镜像
			docker pull ybxxszl/company_tomcat:1.0

	MySQL部署：
		1、docker pull registry.cn-hangzhou.aliyuncs.com/acs-sample/mysql:5.7			拉取镜像
		2、docker tag registry.cn-hangzhou.aliyuncs.com/acs-sample/mysql:5.7 mysql			重新命名
		3、docker run --name MySQL -e MYSQL_ROOT_PASSWORD=1234 -d -i -p 3306:3306 mysql			运行容器
		4、docker exec -it d5610f48e3aa /bin/bash			进入命令行
	Redis部署：
		1、docker pull redis			拉取镜像
		2、docker run --name Redis -d -p 6379:6379 redis --requirepass "1234"			运行容器
		3、docker exec -it 966d8517a70a redis-cli			进入命令行
	Tomcat部署：
		1、docker pull tomcat			拉取镜像
		2、docker run --name Tomcat_Token -p 8080:8080 tomcat			运行容器
		3、docker exec -it 966d8517a70a /bin/bash			进入命令行
		4、部署项目：
			（1）docker cp token.war 966d8517a70a:/usr/local/tomcat/webapps
			     docker run --name Tomcat_Token -p 8080:8080 tomcat
			（2）docker run -d -v /root/token.war:/usr/local/tomcat/webapps/token.war --name Tomcat_Token -p 8080:8080 tomcat
	Nginx部署：
		1、docker pull nginx			拉取镜像
		2、docker run --name Nginx -p 80:80 nginx			运行容器
		3、docker exec -it 966d8517a70a /bin/bash			进入命令行

Dockerfile
	1、创建文件夹
		mkdir MyDockerfile
	2、复制war包
		cp questionnaire_survey.war MyDockerfile
		cp questionnaire_survey_background_system.war MyDockerfile
	3、创建文件
		cd MyDockerfile
		vim Dockerfile
		FROM tomcat
		COPY questionnaire_survey.war /usr/local/tomcat/webapps
		COPY questionnaire_survey_background_system.war /usr/local/tomcat/webapps
	4、创建镜像
		docker build -t tomcat:1.0
	5、创建容器
		docker create --name Tomcat -p 8080:8080 tomcat:1.0
	6、启动容器
		docker start Tomcat

注：
	systemctl（service和checkout的组合）

	systemctl start docker					启动服务
	systemctl restart docker				重启服务
	systemctl stop docker					停止服务
	systemctl status docker				查看状态
	systemctl enable docker				启动开机自启动
	systemctl disable docker				停止开机自启动
	systemctl set-default multi-user.target		使用默认运行级别：命令行模式
	systemctl set-default graphical.target		使用默认运行级别：图形化模式